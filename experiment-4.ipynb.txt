{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0a9bd130-834c-4726-bcfe-783f848d15cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset shape: (5572, 2)\n",
      "label\n",
      "0    4825\n",
      "1     747\n",
      "Name: count, dtype: int64\n",
      "From Scratch Naive Bayes Accuracy: 0.9802690582959641\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      1.00      0.99       966\n",
      "           1       0.97      0.88      0.92       149\n",
      "\n",
      "    accuracy                           0.98      1115\n",
      "   macro avg       0.98      0.94      0.96      1115\n",
      "weighted avg       0.98      0.98      0.98      1115\n",
      " \n",
      "\n",
      "CountVectorizer + Naive Bayes Accuracy: 0.9721973094170404\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.99      0.98      0.98       966\n",
      "           1       0.87      0.93      0.90       149\n",
      "\n",
      "    accuracy                           0.97      1115\n",
      "   macro avg       0.93      0.95      0.94      1115\n",
      "weighted avg       0.97      0.97      0.97      1115\n",
      " \n",
      "\n",
      "TfidfVectorizer + Naive Bayes Accuracy: 0.9497757847533632\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      1.00      0.97       966\n",
      "           1       1.00      0.62      0.77       149\n",
      "\n",
      "    accuracy                           0.95      1115\n",
      "   macro avg       0.97      0.81      0.87      1115\n",
      "weighted avg       0.95      0.95      0.94      1115\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Experiment-4: Naive Bayes (from scratch)\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "from collections import Counter\n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "\n",
    "# -------------------------------\n",
    "# 1. Load Dataset\n",
    "# -------------------------------\n",
    "df = pd.read_csv(r\"C:\\Users\\yashv\\Downloads\\spam.csv\", encoding='latin-1')\n",
    "\n",
    "# Keep only useful columns\n",
    "df = df[['Category', 'Message']]\n",
    "df.columns = ['label', 'message']\n",
    "\n",
    "# Drop missing rows (if any)\n",
    "df = df.dropna(subset=['label', 'message'])\n",
    "\n",
    "# Convert labels to numeric (ham=0, spam=1)\n",
    "df['label'] = df['label'].map({'ham': 0, 'spam': 1})\n",
    "\n",
    "# Drop rows where label mapping failed\n",
    "df = df.dropna(subset=['label'])\n",
    "df['label'] = df['label'].astype(int)\n",
    "\n",
    "print(\"Dataset shape:\", df.shape)\n",
    "print(df['label'].value_counts())\n",
    "\n",
    "# -------------------------------\n",
    "# 2. Preprocessing\n",
    "# -------------------------------\n",
    "def preprocess(text):\n",
    "    text = text.lower()\n",
    "    text = re.sub(r'[^a-z\\s]', '', text)  # keep only letters\n",
    "    return text\n",
    "\n",
    "df['clean'] = df['message'].apply(preprocess)\n",
    "\n",
    "# -------------------------------\n",
    "# 3. Naive Bayes from Scratch\n",
    "# -------------------------------\n",
    "class NaiveBayesScratch:\n",
    "    def __init__(self, alpha=1.0):\n",
    "        self.alpha = alpha  # Laplace smoothing\n",
    "        self.class_priors = {}\n",
    "        self.word_likelihoods = {}\n",
    "        self.vocab = set()\n",
    "    \n",
    "    def fit(self, X, y):\n",
    "        # Convert to numpy arrays\n",
    "        X = np.array(X)\n",
    "        y = np.array(y)\n",
    "\n",
    "        # Separate spam and ham messages\n",
    "        spam_messages = X[y == 1]\n",
    "        ham_messages = X[y == 0]\n",
    "        \n",
    "        # Prior probabilities\n",
    "        self.class_priors[1] = len(spam_messages) / len(X)\n",
    "        self.class_priors[0] = len(ham_messages) / len(X)\n",
    "        \n",
    "        # Count words\n",
    "        spam_words = Counter(\" \".join(spam_messages).split())\n",
    "        ham_words = Counter(\" \".join(ham_messages).split())\n",
    "        \n",
    "        # Vocabulary\n",
    "        self.vocab = set(spam_words.keys()).union(set(ham_words.keys()))\n",
    "        vocab_size = len(self.vocab)\n",
    "        \n",
    "        # Likelihoods with Laplace smoothing\n",
    "        total_spam_words = sum(spam_words.values())\n",
    "        total_ham_words = sum(ham_words.values())\n",
    "        \n",
    "        self.word_likelihoods = {\n",
    "            1: {word: (spam_words[word] + self.alpha) / (total_spam_words + self.alpha*vocab_size) for word in self.vocab},\n",
    "            0: {word: (ham_words[word] + self.alpha) / (total_ham_words + self.alpha*vocab_size) for word in self.vocab}\n",
    "        }\n",
    "    \n",
    "    def predict(self, X):\n",
    "        predictions = []\n",
    "        for text in X:\n",
    "            words = text.split()\n",
    "            # log probabilities to prevent underflow\n",
    "            log_prob_spam = np.log(self.class_priors[1] + 1e-10)  # avoid log(0)\n",
    "            log_prob_ham = np.log(self.class_priors[0] + 1e-10)\n",
    "            \n",
    "            for w in words:\n",
    "                if w in self.vocab:\n",
    "                    log_prob_spam += np.log(self.word_likelihoods[1][w])\n",
    "                    log_prob_ham += np.log(self.word_likelihoods[0][w])\n",
    "            \n",
    "            predictions.append(1 if log_prob_spam > log_prob_ham else 0)\n",
    "        return predictions\n",
    "\n",
    "# -------------------------------\n",
    "# 4. Train-Test Split (fixed)\n",
    "# -------------------------------\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    df['clean'], df['label'], \n",
    "    test_size=0.2, \n",
    "    random_state=42,\n",
    "    stratify=df['label']   # ensures both ham & spam appear\n",
    ")\n",
    "\n",
    "# -------------------------------\n",
    "# 5. Train Naive Bayes (Scratch)\n",
    "# -------------------------------\n",
    "nb = NaiveBayesScratch(alpha=1.0)\n",
    "nb.fit(X_train.values, y_train.values)\n",
    "y_pred_scratch = nb.predict(X_test.values)\n",
    "\n",
    "print(\"From Scratch Naive Bayes Accuracy:\", accuracy_score(y_test, y_pred_scratch))\n",
    "print(classification_report(y_test, y_pred_scratch), \"\\n\")\n",
    "\n",
    "# -------------------------------\n",
    "# 6. Sklearn with CountVectorizer\n",
    "# -------------------------------\n",
    "cv = CountVectorizer()\n",
    "X_cv = cv.fit_transform(df['clean'])\n",
    "\n",
    "X_train_cv, X_test_cv, y_train_cv, y_test_cv = train_test_split(\n",
    "    X_cv, df['label'], \n",
    "    test_size=0.2, \n",
    "    random_state=42,\n",
    "    stratify=df['label']\n",
    ")\n",
    "\n",
    "nb_cv = MultinomialNB()\n",
    "nb_cv.fit(X_train_cv, y_train_cv)\n",
    "y_pred_cv = nb_cv.predict(X_test_cv)\n",
    "\n",
    "print(\"CountVectorizer + Naive Bayes Accuracy:\", accuracy_score(y_test_cv, y_pred_cv))\n",
    "print(classification_report(y_test_cv, y_pred_cv), \"\\n\")\n",
    "\n",
    "# -------------------------------\n",
    "# 7. Sklearn with TfidfVectorizer\n",
    "# -------------------------------\n",
    "tfidf = TfidfVectorizer()\n",
    "X_tfidf = tfidf.fit_transform(df['clean'])\n",
    "\n",
    "X_train_tf, X_test_tf, y_train_tf, y_test_tf = train_test_split(\n",
    "    X_tfidf, df['label'], \n",
    "    test_size=0.2, \n",
    "    random_state=42,\n",
    "    stratify=df['label']\n",
    ")\n",
    "\n",
    "nb_tfidf = MultinomialNB()\n",
    "nb_tfidf.fit(X_train_tf, y_train_tf)\n",
    "y_pred_tf = nb_tfidf.predict(X_test_tf)\n",
    "\n",
    "print(\"TfidfVectorizer + Naive Bayes Accuracy:\", accuracy_score(y_test_tf, y_pred_tf))\n",
    "print(classification_report(y_test_tf, y_pred_tf))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33ceff5e-ed41-46a9-b109-3d9983c41755",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
